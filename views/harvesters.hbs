<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Browse and Manage Harvesters</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <header>
    <a href="/" class="header-link">
      <h1>Browse and Manage Harvesters</h1>
    </a>
  </header>
  <nav class="nav-links">
    <a href="/orders" class="nav-button">Orders</a>
    <a href="/customers" class="nav-button">Customers</a>
    <a href="/shipments" class="nav-button">Shipments</a>
    <a href="/spice_silos" class="nav-button">Spice Silos</a>
    <a href="/harvesters" class="nav-button">Harvesters</a>
  </nav>
  <section>
    <h2>Existing Harvesters</h2>
    <table border="1" id="Harvesters-table">
      <thead>
        <tr>
          <th>Harvester ID</th>
          <th>Base City</th>
          <th>Model</th>
          <th>Team Captain</th>
          <th>Last Maintenance Date</th>
          <th>Total Harvested</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        {{#each data}}
        <tr data-value="{{this.harvester_id}}">
          <td>{{this.harvester_id}}</td>
          <td>{{this.base_city}}</td>
          <td>{{this.model}}</td>
          <td>{{this.team_captain}}</td>
          <td>{{this.last_maintenance_date}}</td>
          <td>{{this.total_harvested}}</td>
          <td>
            <button onclick="editHarvester({{this.harvester_id}})">Edit</button>
            <button onclick="deleteHarvester({{this.harvester_id}})">Delete</button>
          </td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </section>

  <section>
    <h2>Add New Harvester</h2>
    <form id="add-harvester-form-ajax">
      <label for="input-base-city">Base City:</label>
      <input type="text" id="input-base-city" name="base_city" required autocomplete="city"><br><br>
      
      <label for="input-model">Model:</label>
      <input type="text" id="input-model" name="model" required autocomplete="model"><br><br>
      
      <label for="input-team-captain">Team Captain:</label>
      <input type="text" id="input-team-captain" name="team_captain" required autocomplete="captain"><br><br>
      
      <label for="input-last-maintenance-date">Last Maintenance Date:</label>
      <input type="date" id="input-last-maintenance-date" name="last_maintenance_date" autocomplete="date"><br><br>
      
      <label for="input-total-harvested">Total Harvested:</label>
      <input type="number" id="input-total-harvested" name="total_harvested" step="0.01" required autocomplete="harvest"><br><br>
      
      <button type="submit">Add Harvester</button>
    </form>
  </section>

  <section>
    <h2>Update Harvester Information</h2>
    <p>Select a harvester to edit and update their details.</p>
    <form id="update-harvester-form-ajax">
      <input type="hidden" id="harvester-id-update" name="harvester_id">

      <label for="input-base-city-update">Base City:</label>
      <input type="text" id="input-base-city-update" name="base_city" required><br><br>
      
      <label for="input-model-update">Model:</label>
      <input type="text" id="input-model-update" name="model" required><br><br>
      
      <label for="input-team-captain-update">Team Captain:</label>
      <input type="text" id="input-team-captain-update" name="team_captain" required><br><br>
      
      <label for="input-last-maintenance-date-update">Last Maintenance Date:</label>
      <input type="date" id="input-last-maintenance-date-update" name="last_maintenance_date"><br><br>
      
      <label for="input-total-harvested-update">Total Harvested:</label>
      <input type="number" id="input-total-harvested-update" name="total_harvested" step="0.01" required><br><br>
      
      <button type="submit">Update Harvester</button>
    </form>
  </section>

  <!-- Then load the CRUD operation scripts -->
  <script src="/js/harvesters/add_harvester.js"></script>
  <script src="/js/harvesters/update_harvester.js"></script>
  <script src="/js/harvesters/delete_harvester.js"></script>
  
  <!-- harvester-silo association section -->
<!-- HARVESTER-SILO ASSOCIATION SECTION -->
<section>
  <h2>Manage Harvester-Silo Associations</h2>
  <table border="1" id="Harvesters-Silos-table">
    <thead>
      <tr>
        <th>Association ID</th>
        <th>Harvester</th>
        <th>Silo</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      {{#each associations}}
      <tr data-value="{{this.harvester_silo_id}}" data-harvester-id="{{this.harvester_id}}" data-silo-id="{{this.silo_id}}">
        <td>{{this.harvester_silo_id}}</td>
        <td>{{this.harvester_info}}</td>
        <td>{{this.silo_info}}</td>
        <td>
          <button onclick="editHarvesterSilo({{this.harvester_silo_id}})">Edit</button>
          <button onclick="deleteHarvesterSilo({{this.harvester_silo_id}})">Delete</button>
        </td>
      </tr>
      {{/each}}
    </tbody>
  </table>
  
  <h3 id="harvester-silo-form-title">Add Harvester-Silo Association</h3>
  <form id="harvester-silo-form-ajax">
    <input type="hidden" id="harvester-silo-id" name="harvester_silo_id" value="">
    <input type="hidden" id="form-mode" value="add">

    <label for="input-harvester-id">Select Harvester:</label>
    <select id="input-harvester-id" name="harvester_id" required>
      <option value="">--Select Harvester--</option>
      {{#each data}}
      <option value="{{this.harvester_id}}">{{this.model}} ({{this.base_city}}) - Captain: {{this.team_captain}}</option>
      {{/each}}
    </select><br><br>

    <label for="input-silo-id">Select Silo:</label>
    <select id="input-silo-id" name="silo_id" required>
      <option value="">--Select Silo--</option>
      {{#each silos}}
      <option value="{{this.silo_id}}">Silo {{this.silo_id}} ({{this.city}}, Capacity: {{this.spice_capacity}})</option>
      {{/each}}
    </select><br><br>

    <button type="submit" id="submit-button">Add Association</button>
    <button type="button" id="cancel-button" style="display: none;" onclick="resetForm()">Cancel</button>
  </form>
</section>

<!-- Harvester-Silo script -->
<script>
  // Get the form element
  let harvesterSiloForm = document.getElementById('harvester-silo-form-ajax');
  let formMode = document.getElementById('form-mode');
  let formTitle = document.getElementById('harvester-silo-form-title');
  let submitButton = document.getElementById('submit-button');
  let cancelButton = document.getElementById('cancel-button');

  // Debug version of the function to edit a harvester-silo association
  function editHarvesterSilo(association_id) {
  console.log("=== Starting editHarvesterSilo debug ===");
  console.log("Looking for association with ID:", association_id);
  
  // First, let's inspect all rows to see if data attributes are present
  console.log("Inspecting all rows in the table:");
  let allRows = document.querySelectorAll("#Harvesters-Silos-table tbody tr");
  console.log("Found", allRows.length, "rows in the table");
  
  allRows.forEach((row, index) => {
    console.log("Row", index + 1, "attributes:");
    console.log("  data-value:", row.getAttribute("data-value"));
    console.log("  data-harvester-id:", row.getAttribute("data-harvester-id"));
    console.log("  data-silo-id:", row.getAttribute("data-silo-id"));
  });
  
  // Now let's try to find our specific row
  let row = document.querySelector(`tr[data-value='${association_id}']`);
  
  if (!row) {
    console.error("Could not find row with association_id:", association_id);
    console.log("Let's try another selector method:");
    
    // Try an alternative method to find the row
    allRows.forEach((r, index) => {
      if (r.cells[0].textContent.trim() == association_id) {
        console.log("Found row by cell content at index:", index);
        row = r;
      }
    });
    
    if (!row) {
      console.error("Still couldn't find the row. Aborting.");
      return;
    }
  }
  
  // Get harvester and silo IDs from data attributes
  let harvesterId = row.getAttribute("data-harvester-id");
  let siloId = row.getAttribute("data-silo-id");
  
  console.log("Found row data attributes:");
  console.log("  data-value:", row.getAttribute("data-value"));
  console.log("  data-harvester-id:", harvesterId);
  console.log("  data-silo-id:", siloId);
  
  // If data attributes are null, let's try to extract from cells
  if (!harvesterId || !siloId) {
    console.log("Data attributes are null, trying to extract from table cells instead");
    
    // Let's try to extract the IDs from the harvester_info and silo_info
    // This is a backup method and may not be reliable
    
    // First cell is the ID, second is harvester info, third is silo info
    let harvesterInfo = row.cells[1].textContent.trim();
    let siloInfo = row.cells[2].textContent.trim();
    
    console.log("Harvester info cell:", harvesterInfo);
    console.log("Silo info cell:", siloInfo);
    
    // Let's check the select options to find a match
    let harvesterSelect = document.getElementById("input-harvester-id");
    let siloSelect = document.getElementById("input-silo-id");
    
    console.log("Available harvester options:");
    for (let i = 0; i < harvesterSelect.options.length; i++) {
      console.log(`  Option ${i}: value=${harvesterSelect.options[i].value}, text=${harvesterSelect.options[i].text}`);
      // Try to match the text with the harvester info
      if (harvesterSelect.options[i].text && harvesterInfo.includes(harvesterSelect.options[i].text.split(" (")[0])) {
        harvesterId = harvesterSelect.options[i].value;
        console.log("  Found matching harvester ID:", harvesterId);
      }
    }
    
    console.log("Available silo options:");
    for (let i = 0; i < siloSelect.options.length; i++) {
      console.log(`  Option ${i}: value=${siloSelect.options[i].value}, text=${siloSelect.options[i].text}`);
      // Try to match the text with the silo info
      if (siloSelect.options[i].text && siloInfo.includes(`Silo ${siloSelect.options[i].value}`)) {
        siloId = siloSelect.options[i].value;
        console.log("  Found matching silo ID:", siloId);
      }
    }
  }
  
  // If we still don't have IDs, we'll just use the first item in each dropdown as a fallback
  if (!harvesterId) {
    console.log("Couldn't determine harvester ID, using first non-empty option as fallback");
    let harvesterSelect = document.getElementById("input-harvester-id");
    for (let i = 0; i < harvesterSelect.options.length; i++) {
      if (harvesterSelect.options[i].value) {
        harvesterId = harvesterSelect.options[i].value;
        console.log("Using fallback harvester ID:", harvesterId);
        break;
      }
    }
  }
  
  if (!siloId) {
    console.log("Couldn't determine silo ID, using first non-empty option as fallback");
    let siloSelect = document.getElementById("input-silo-id");
    for (let i = 0; i < siloSelect.options.length; i++) {
      if (siloSelect.options[i].value) {
        siloId = siloSelect.options[i].value;
        console.log("Using fallback silo ID:", siloId);
        break;
      }
    }
  }

  // Pre-fill the form fields
  document.getElementById("harvester-silo-id").value = association_id;
  
  // Get the select elements
  let harvesterSelect = document.getElementById("input-harvester-id");
  let siloSelect = document.getElementById("input-silo-id");
  
  console.log("Setting dropdown values:");
  console.log("  Harvester ID to set:", harvesterId);
  console.log("  Silo ID to set:", siloId);
  
  // For harvester dropdown
  let harvesterFound = false;
  for (let i = 0; i < harvesterSelect.options.length; i++) {
    if (harvesterSelect.options[i].value == harvesterId) {
      console.log(`  Setting harvester selectedIndex to ${i} (value: ${harvesterSelect.options[i].value})`);
      harvesterSelect.selectedIndex = i;
      harvesterFound = true;
      break;
    }
  }
  
  if (!harvesterFound) {
    console.error("Could not find harvester with ID:", harvesterId, "in dropdown options");
  }
  
  // For silo dropdown
  let siloFound = false;
  for (let i = 0; i < siloSelect.options.length; i++) {
    if (siloSelect.options[i].value == siloId) {
      console.log(`  Setting silo selectedIndex to ${i} (value: ${siloSelect.options[i].value})`);
      siloSelect.selectedIndex = i;
      siloFound = true;
      break;
    }
  }
  
  if (!siloFound) {
    console.error("Could not find silo with ID:", siloId, "in dropdown options");
  }

  // Update form mode and appearance
  formMode.value = "update";
  formTitle.innerText = "Update Harvester-Silo Association";
  submitButton.innerText = "Update Association";
  cancelButton.style.display = "inline-block";

  // Scroll to the form
  harvesterSiloForm.scrollIntoView({ behavior: "smooth" });
  
  console.log("=== Finished editHarvesterSilo debug ===");
}
 
  // Function to reset the form to add mode
  function resetForm() {
    document.getElementById("harvester-silo-id").value = "";
    document.getElementById("input-harvester-id").value = "";
    document.getElementById("input-silo-id").value = "";
    
    formMode.value = "add";
    formTitle.innerText = "Add Harvester-Silo Association";
    submitButton.innerText = "Add Association";
    cancelButton.style.display = "none";
  }

  // Form submit handler
  harvesterSiloForm.addEventListener("submit", function (e) {
    // Prevent the form from submitting
    e.preventDefault();

    // Get form field elements
    let associationId = document.getElementById("harvester-silo-id").value;
    let inputHarvesterId = document.getElementById("input-harvester-id");
    let inputSiloId = document.getElementById("input-silo-id");
    let currentMode = document.getElementById("form-mode").value;

    // Get the values from the form fields
    let harvesterIdValue = inputHarvesterId.value;
    let siloIdValue = inputSiloId.value;

    // Validate required fields
    if (!harvesterIdValue || !siloIdValue) {
      alert("Please select both a harvester and a silo");
      return;
    }

    // Build data object to send
    let data = {
      harvester_id: harvesterIdValue,
      silo_id: siloIdValue
    };
    
    // Add the association ID for updates
    if (currentMode === "update") {
      data.harvester_silo_id = associationId;
    }
    
    // Debug logging
    console.log(`Sending ${currentMode} data:`, data);
    
    // Setup AJAX request
    var xhttp = new XMLHttpRequest();
    
    // Determine endpoint based on mode
    let endpoint = currentMode === "add" 
      ? "/harvesters/add-harvester-silo-ajax" 
      : "/harvesters/put-harvester-silo-ajax";
    
    let method = currentMode === "add" ? "POST" : "PUT";
    
    xhttp.open(method, endpoint, true);
    xhttp.setRequestHeader("Content-type", "application/json");

    // Handle the AJAX response
    xhttp.onreadystatechange = () => {
      if (xhttp.readyState === 4) {
        console.log(`${currentMode} response status:`, xhttp.status);
        console.log(`${currentMode} response:`, xhttp.response);
        
        if (xhttp.status === 200) {
          try {
            // Only try to parse if there is a response
            if (xhttp.response && xhttp.response.trim().length > 0) {
              let newAssociation = JSON.parse(xhttp.response);
              console.log(`Parsed ${currentMode} response:`, newAssociation);
              
              if (currentMode === "add") {
                // Add the new data to the table
                addRowToTable(newAssociation);
              } else {
                // Update the existing row
                updateRow(xhttp.response, associationId);
              }
              
              // Reset the form to add mode
              resetForm();
              
              // Optional: show success message
              alert(`Harvester-Silo association ${currentMode === "add" ? "added" : "updated"} successfully!`);
            } else {
              console.error("Empty response received from server");
              alert("Server returned an empty response. Please try again.");
            }
          } catch (e) {
            console.error("JSON Parse Error:", e);
            console.error("Raw response:", xhttp.response);
            alert("Error processing server response. Please try again.");
          }
        } else {
          console.log(`There was an error with the ${currentMode}. Status code:`, xhttp.status);
          alert(`Failed to ${currentMode} association. Please try again.`);
        }
      }
    };

    // Send the request with the data as JSON
    xhttp.send(JSON.stringify(data));
  });

  // Function to add a new row to the table
  function addRowToTable(newAssociation) {
    // Get the table body
    let tableBody = document.getElementById("Harvesters-Silos-table").getElementsByTagName("tbody")[0];
    
    if (!tableBody) {
      console.error("Could not find table body");
      return;
    }

    // Create a new row
    let row = document.createElement("tr");
    row.setAttribute('data-value', newAssociation.harvester_silo_id);
    row.setAttribute('data-harvester-id', newAssociation.harvester_id);
    row.setAttribute('data-silo-id', newAssociation.silo_id);

    // Create table cells
    let idCell = document.createElement("td");
    let harvesterCell = document.createElement("td");
    let siloCell = document.createElement("td");
    let actionCell = document.createElement("td");

    // Fill cells with correct data
    idCell.innerText = newAssociation.harvester_silo_id;
    harvesterCell.innerText = newAssociation.harvester_info;
    siloCell.innerText = newAssociation.silo_info;

    // Create Edit button
    let editButton = document.createElement("button");
    editButton.innerText = "Edit";
    editButton.onclick = function() {
      editHarvesterSilo(newAssociation.harvester_silo_id);
    };

    // Create Delete button
    let deleteButton = document.createElement("button");
    deleteButton.innerText = "Delete";
    deleteButton.onclick = function() {
      deleteHarvesterSilo(newAssociation.harvester_silo_id);
    };

    // Append buttons to action cell
    actionCell.appendChild(editButton);
    actionCell.appendChild(document.createTextNode(" ")); // Space between buttons
    actionCell.appendChild(deleteButton);

    // Append cells to row
    row.appendChild(idCell);
    row.appendChild(harvesterCell);
    row.appendChild(siloCell);
    row.appendChild(actionCell);

    // Append row to table
    tableBody.appendChild(row);
    
    console.log("New harvester-silo row added to table");
  }

  // Function to update a row in the table
  function updateRow(data, association_id) {
    let table = document.getElementById("Harvesters-Silos-table");
    let parsedData = JSON.parse(data);
    
    // Debug: verify the parsed data
    console.log("Updating row with data:", parsedData);
    
    // Find the row to update
    for (let i = 0, row; row = table.rows[i]; i++) {
      if (table.rows[i].getAttribute("data-value") == association_id) {
        let updateRowIndex = table.getElementsByTagName("tr")[i];
        
        // Update the data attributes
        updateRowIndex.setAttribute('data-harvester-id', parsedData.harvester_id);
        updateRowIndex.setAttribute('data-silo-id', parsedData.silo_id);
        
        // Update the table cells: column indices are [1]=Harvester, [2]=Silo
        let tdHarvester = updateRowIndex.getElementsByTagName("td")[1];
        let tdSilo = updateRowIndex.getElementsByTagName("td")[2];

        tdHarvester.innerHTML = parsedData.harvester_info;
        tdSilo.innerHTML = parsedData.silo_info;
        
        console.log("Row updated successfully");
        break;
      }
    }
  }

  // Function to delete a harvester-silo association
  function deleteHarvesterSilo(association_id) {
    if (!confirm("Are you sure you want to delete this harvester-silo association?")) {
      return;
    }
    
    // Put our data we want to send in a javascript object
    let data = {
      id: association_id
    };

    // Setup our AJAX request
    var xhttp = new XMLHttpRequest();
    xhttp.open("DELETE", "/harvesters/delete-harvester-silo-ajax", true);
    xhttp.setRequestHeader("Content-type", "application/json");

    // Tell our AJAX request how to resolve
    xhttp.onreadystatechange = () => {
      if (xhttp.readyState == 4 && xhttp.status == 204) {
        // Remove the row from the table
        deleteRow(association_id);
        
        // If the form was in edit mode for this association, reset it
        if (document.getElementById("harvester-silo-id").value == association_id) {
          resetForm();
        }
        
        // Optional: show success message
        alert("Association deleted successfully!");
      }
      else if (xhttp.readyState == 4 && xhttp.status != 204) {
        console.log("There was an error with the delete operation.");
        alert("Failed to delete association. Please try again.");
      }
    }
    
    // Send the request and wait for the response
    xhttp.send(JSON.stringify(data));
  }

  // Function to delete a row from the table
  function deleteRow(association_id) {
    let table = document.getElementById("Harvesters-Silos-table");
    for (let i = 0, row; row = table.rows[i]; i++) {
      if (table.rows[i].getAttribute("data-value") == association_id) {
        table.deleteRow(i);
        console.log("Harvester-Silo row deleted");
        break;
      }
    }
  }
</script>